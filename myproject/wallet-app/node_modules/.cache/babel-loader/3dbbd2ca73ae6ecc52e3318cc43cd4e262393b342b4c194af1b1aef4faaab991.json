{"ast":null,"code":"export default {\n  data() {\n    return {\n      messages: [],\n      // Pass this from your parent component or API\n      formFields: [{\n        label: \"Amount\",\n        name: \"amount\",\n        type: \"number\",\n        value: null\n      }\n      // Add other fields as necessary\n      ],\n      loading: false,\n      showModal: false,\n      errorMessage: \"\",\n      csrfToken: \"\" // Set this value through props or API\n    };\n  },\n  methods: {\n    showLoading() {\n      this.loading = true;\n    },\n    showConfirmation() {\n      if (this.validateForm()) {\n        this.showModal = true;\n      }\n    },\n    hideConfirmation() {\n      this.showModal = false;\n    },\n    confirmPayment() {\n      this.hideConfirmation();\n      this.showLoading();\n      // Logic to submit the form data\n      // Example: this.$http.post('/api/pay', { amount: this.formFields[0].value })\n      // Handle success and error responses\n    },\n    validateForm() {\n      const amount = this.formFields[0].value;\n      if (isNaN(amount) || amount <= 0) {\n        this.errorMessage = \"Please enter a valid amount.\";\n        return false;\n      }\n      this.errorMessage = \"\"; // Clear error message if valid\n      return true;\n    }\n  }\n};","map":{"version":3,"names":["data","messages","formFields","label","name","type","value","loading","showModal","errorMessage","csrfToken","methods","showLoading","showConfirmation","validateForm","hideConfirmation","confirmPayment","amount","isNaN"],"sources":["C:\\Users\\ADMIN\\Desktop\\q - copy-gold\\myproject\\wallet-app\\src\\components\\pay_service.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>Pay Service Bill</h1>\r\n  \r\n      <div v-if=\"messages.length\">\r\n        <ul>\r\n          <li v-for=\"(message, index) in messages\" :key=\"index\">{{ message }}</li>\r\n        </ul>\r\n      </div>\r\n  \r\n      <div class=\"form-container\">\r\n        <form @submit.prevent=\"showConfirmation\">\r\n          <input type=\"hidden\" name=\"csrfmiddlewaretoken\" :value=\"csrfToken\" />\r\n          <div v-for=\"(field, index) in formFields\" :key=\"index\" class=\"form-field\">\r\n            <label :for=\"field.name\">{{ field.label }}</label>\r\n            <input \r\n              v-model=\"field.value\" \r\n              :type=\"field.type\" \r\n              :id=\"field.name\" \r\n              :name=\"field.name\" \r\n              required \r\n            />\r\n          </div>\r\n  \r\n          <!-- Client-side validation error message (if any) -->\r\n          <div id=\"error-message\" class=\"error\">{{ errorMessage }}</div>\r\n  \r\n          <button type=\"submit\">Pay Now</button>\r\n  \r\n          <!-- Loading Spinner -->\r\n          <div class=\"spinner\" v-if=\"loading\"></div>\r\n        </form>\r\n  \r\n        <!-- Confirmation modal -->\r\n        <div v-if=\"showModal\" class=\"modal\">\r\n          <p>Are you sure you want to pay this bill?</p>\r\n          <button @click=\"confirmPayment\">Yes</button>\r\n          <button @click=\"hideConfirmation\">No</button>\r\n        </div>\r\n      </div>\r\n  \r\n      <br />\r\n      <router-link to=\"/dashboard\">Back to Dashboard</router-link>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        messages: [], // Pass this from your parent component or API\r\n        formFields: [\r\n          { label: \"Amount\", name: \"amount\", type: \"number\", value: null },\r\n          // Add other fields as necessary\r\n        ],\r\n        loading: false,\r\n        showModal: false,\r\n        errorMessage: \"\",\r\n        csrfToken: \"\" // Set this value through props or API\r\n      };\r\n    },\r\n    methods: {\r\n      showLoading() {\r\n        this.loading = true;\r\n      },\r\n      showConfirmation() {\r\n        if (this.validateForm()) {\r\n          this.showModal = true;\r\n        }\r\n      },\r\n      hideConfirmation() {\r\n        this.showModal = false;\r\n      },\r\n      confirmPayment() {\r\n        this.hideConfirmation();\r\n        this.showLoading();\r\n        // Logic to submit the form data\r\n        // Example: this.$http.post('/api/pay', { amount: this.formFields[0].value })\r\n        // Handle success and error responses\r\n      },\r\n      validateForm() {\r\n        const amount = this.formFields[0].value;\r\n        if (isNaN(amount) || amount <= 0) {\r\n          this.errorMessage = \"Please enter a valid amount.\";\r\n          return false;\r\n        }\r\n        this.errorMessage = \"\"; // Clear error message if valid\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Basic Reset */\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  /* Body Styles */\r\n  body {\r\n    font-family: Arial, sans-serif;\r\n    background-color: #f4f9fc;\r\n    color: #333;\r\n    text-align: center;\r\n    padding: 30px;\r\n  }\r\n  \r\n  /* Header Styles */\r\n  h1 {\r\n    font-size: 2.5em;\r\n    color: #000000;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  /* Form Container */\r\n  .form-container {\r\n    background-color: #ffffff;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n    padding: 20px;\r\n    max-width: 400px;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n  }\r\n  \r\n  /* Button Styles */\r\n  button {\r\n    padding: 10px 20px;\r\n    font-size: 1em;\r\n    color: #ffffff;\r\n    background-color: #000000;\r\n    border: none;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s ease;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #808080;\r\n  }\r\n  \r\n  /* Loading Spinner */\r\n  .spinner {\r\n    margin: 10px auto;\r\n    border: 4px solid #f3f3f3;\r\n    border-top: 4px solid #000000;\r\n    border-radius: 50%;\r\n    width: 40px;\r\n    height: 40px;\r\n    animation: spin 1s linear infinite;\r\n  }\r\n  \r\n  /* Modal Styles */\r\n  .modal {\r\n    display: block; /* Modify as necessary */\r\n  }\r\n  \r\n  /* Error Messages */\r\n  .error {\r\n    color: red;\r\n    font-size: 0.9em;\r\n  }\r\n  \r\n  /* Responsive Design */\r\n  @media (max-width: 600px) {\r\n    body {\r\n      padding: 15px;\r\n    }\r\n    h1 {\r\n      font-size: 2em;\r\n    }\r\n    .form-container {\r\n      padding: 15px;\r\n    }\r\n    button {\r\n      font-size: 0.9em;\r\n      padding: 8px 16px;\r\n    }\r\n  }\r\n  </style>\r\n  "],"mappings":"AA+CE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MAAE;MACdC,UAAU,EAAE,CACV;QAAEC,KAAK,EAAE,QAAQ;QAAEC,IAAI,EAAE,QAAQ;QAAEC,IAAI,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAK;MAC/D;MAAA,CACD;MACDC,OAAO,EAAE,KAAK;MACdC,SAAS,EAAE,KAAK;MAChBC,YAAY,EAAE,EAAE;MAChBC,SAAS,EAAE,EAAC,CAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACL,OAAM,GAAI,IAAI;IACrB,CAAC;IACDM,gBAAgBA,CAAA,EAAG;MACjB,IAAI,IAAI,CAACC,YAAY,CAAC,CAAC,EAAE;QACvB,IAAI,CAACN,SAAQ,GAAI,IAAI;MACvB;IACF,CAAC;IACDO,gBAAgBA,CAAA,EAAG;MACjB,IAAI,CAACP,SAAQ,GAAI,KAAK;IACxB,CAAC;IACDQ,cAAcA,CAAA,EAAG;MACf,IAAI,CAACD,gBAAgB,CAAC,CAAC;MACvB,IAAI,CAACH,WAAW,CAAC,CAAC;MAClB;MACA;MACA;IACF,CAAC;IACDE,YAAYA,CAAA,EAAG;MACb,MAAMG,MAAK,GAAI,IAAI,CAACf,UAAU,CAAC,CAAC,CAAC,CAACI,KAAK;MACvC,IAAIY,KAAK,CAACD,MAAM,KAAKA,MAAK,IAAK,CAAC,EAAE;QAChC,IAAI,CAACR,YAAW,GAAI,8BAA8B;QAClD,OAAO,KAAK;MACd;MACA,IAAI,CAACA,YAAW,GAAI,EAAE,EAAE;MACxB,OAAO,IAAI;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}